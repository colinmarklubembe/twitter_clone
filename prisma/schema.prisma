// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tweet {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    userId   String   @db.ObjectId
    content  String
    createdAt DateTime @default(now())
    likes    Like[]

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])

}

model Like { 
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    tweetId String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([tweetId])

}
model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.ObjectId

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String   @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String   @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    // Non-NextAuth fields
    tweets        Tweet[]
    likes         Like[]
    followers     UserFollowers[] @relation("Followers")
    following     UserFollowers[] @relation("Following")
}

model UserFollowers {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  followerId String @db.ObjectId
  followingId String @db.ObjectId
  follower   User @relation("Followers", fields: [followerId], references: [id])
  following  User @relation("Following", fields: [followingId], references: [id])

  @@index([followerId])
  @@index([followingId])
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}